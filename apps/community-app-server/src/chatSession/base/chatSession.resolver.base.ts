/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ChatSession } from "./ChatSession";
import { ChatSessionCountArgs } from "./ChatSessionCountArgs";
import { ChatSessionFindManyArgs } from "./ChatSessionFindManyArgs";
import { ChatSessionFindUniqueArgs } from "./ChatSessionFindUniqueArgs";
import { CreateChatSessionArgs } from "./CreateChatSessionArgs";
import { UpdateChatSessionArgs } from "./UpdateChatSessionArgs";
import { DeleteChatSessionArgs } from "./DeleteChatSessionArgs";
import { User } from "../../user/base/User";
import { ChatSessionService } from "../chatSession.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ChatSession)
export class ChatSessionResolverBase {
  constructor(
    protected readonly service: ChatSessionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "read",
    possession: "any",
  })
  async _chatSessionsMeta(
    @graphql.Args() args: ChatSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ChatSession])
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "read",
    possession: "any",
  })
  async chatSessions(
    @graphql.Args() args: ChatSessionFindManyArgs
  ): Promise<ChatSession[]> {
    return this.service.chatSessions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ChatSession, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "read",
    possession: "own",
  })
  async chatSession(
    @graphql.Args() args: ChatSessionFindUniqueArgs
  ): Promise<ChatSession | null> {
    const result = await this.service.chatSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChatSession)
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "create",
    possession: "any",
  })
  async createChatSession(
    @graphql.Args() args: CreateChatSessionArgs
  ): Promise<ChatSession> {
    return await this.service.createChatSession({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChatSession)
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "update",
    possession: "any",
  })
  async updateChatSession(
    @graphql.Args() args: UpdateChatSessionArgs
  ): Promise<ChatSession | null> {
    try {
      return await this.service.updateChatSession({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChatSession)
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "delete",
    possession: "any",
  })
  async deleteChatSession(
    @graphql.Args() args: DeleteChatSessionArgs
  ): Promise<ChatSession | null> {
    try {
      return await this.service.deleteChatSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: ChatSession): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async PublicChatSession(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.PublicChatSession(args);
  }
}
